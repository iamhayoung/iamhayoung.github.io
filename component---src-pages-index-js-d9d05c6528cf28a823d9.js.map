{"version":3,"file":"component---src-pages-index-js-d9d05c6528cf28a823d9.js","mappings":"kJAwDA,IA5CY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,aAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,+BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,sBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,uCACa,8BAASb,EAAOa,MAD7B,KAC6Cb,MAAAA,OAAA,EAAAA,EAAQc,UAAW,KAAM,IACpE,2BACA,qBAAGC,KAAI,wBAAwBZ,MAAAA,OAAA,EAAAA,EAAQa,SAAR,KAA/B,c,2FCqBV,UA7DkB,SAAC,GAAwB,IAAD,EAArBlB,EAAqB,EAArBA,KAAMmB,EAAe,EAAfA,SACnBC,GAAY,UAAApB,EAAKG,KAAKC,oBAAV,eAAwBiB,QAAxB,QACZC,EAAQtB,EAAKuB,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,SACX,gBAAC,IAAD,MACA,sBAAIK,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAI,SAAAC,GACT,IAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACE1B,UAAU,iBACV4B,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYjB,KAG/B,6BACGQ,EAAKC,YAAYS,KADpB,OAESC,EAAAA,EAAAA,GAAkBX,EAAKY,cAGlC,+BACE,qBACEC,wBAAyB,CACvBC,OAAQd,EAAKC,YAAYc,aAAef,EAAKgB,SAE/CP,SAAS,0B,qBC1DtB,SAASE,EAAkBM,GAChC,IAAIC,EAAUC,KAAKC,MAAMH,EAAU,GAEnC,OAAIC,EAAU,EACF,IAAIG,MAAMF,KAAKC,MAAMF,EAAUC,KAAKG,IAC3CC,KAAK,MACLC,KAAK,IAFR,IAEeP,EAFf,YAIU,IAAII,MAAMH,GAAW,GAC5BK,KAAK,MACLC,KAAK,IAFR,IAEeP,EAFf,Y","sources":["webpack://hayoung-life/./src/components/bio/index.js","webpack://hayoung-life/./src/pages/index.js","webpack://hayoung-life/./src/utils/helpers.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport \"./style.scss\";\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            github\n          }\n        }\n      }\n    }\n  `);\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author;\n  const social = data.site.siteMetadata?.social;\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}{\" \"}\n          <br />\n          <a href={`https://github.com/${social?.github || ``}`}>GitHub</a>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Bio;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\nimport { formatReadingTime } from \"../utils/helpers\";\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const posts = data.allMarkdownRemark.nodes;\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"Home\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug;\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>\n                    {post.frontmatter.date}\n                    {` ‚Ä¢ ${formatReadingTime(post.timeToRead)}`}\n                  </small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          );\n        })}\n      </ol>\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        timeToRead\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`;\n","export function formatReadingTime(minutes) {\n  let thunder = Math.round(minutes / 5);\n\n  if (thunder > 5) {\n    return `${new Array(Math.round(thunder / Math.E))\n      .fill(\"üî•\")\n      .join(\"\")} ${minutes} min read`;\n  } else {\n    return `${new Array(thunder || 1)\n      .fill(\"‚ö°Ô∏è\")\n      .join(\"\")} ${minutes} min read`;\n  }\n}\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","github","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","formatReadingTime","timeToRead","dangerouslySetInnerHTML","__html","description","excerpt","minutes","thunder","Math","round","Array","E","fill","join"],"sourceRoot":""}